class Solution:    def searchMatrix_failed(self, matrix, target):        """        :type matrix: List[List[int]]        :type target: int        :rtype: bool        """        # wjcnote 这个方法错误，[mid, mid]并不是有效的分界点        # [row_mid, col_mid]并不是一个有效的分界点        def worker(rbegin, rend, cbegin, cend):            if rbegin == rend and cbegin == cend:                return True if matrix[rbegin][cbegin] == target else False            rmid = (rbegin + rend) // 2            cmid = (cbegin + cend) // 2            if target <= matrix[rmid][cmid]:                return worker(rbegin, rmid, cbegin, cmid)            elif target > matrix[rmid][cend] and target > matrix[rend][cmid]:                return worker(min(rmid + 1, rend), rend, min(cmid + 1, cend), cend)            else:                return worker(min(rmid + 1, rend), rend, cbegin, cmid) or \                       worker(rbegin, rmid, min(cmid + 1, cend), cend)        if not matrix:            return False        col_num = len(matrix[0])        if not col_num:            return False        row_num = len(matrix)        return worker(0, row_num - 1, 0, col_num - 1)    def searchMatrix(self, matrix, target):        def worker(row_index, col_index):            if row_index > row_num - 1 or col_index < 0:                return False            if target == matrix[row_index][col_index]:                return True            elif target < matrix[row_index][col_index]:                return worker(row_index, col_index - 1)            else:                return worker(row_index + 1, col_index)        if not matrix:            return False        col_num = len(matrix[0])        if not col_num:            return False        row_num = len(matrix)        return worker(0, col_num - 1)    def test_solution(self):        # case1        matrix = [            [1, 4, 7, 11, 15],            [2, 5, 8, 12, 19],            [3, 6, 9, 16, 22],            [10, 13, 14, 17, 24],            [18, 21, 23, 26, 30]        ]        target = 5        assert self.searchMatrix(matrix, target) is True        # case2        target = 20        assert self.searchMatrix(matrix, target) is False        # case3        matrix = [            [1, 4, 7, 11, 15]        ]        target = 1        assert self.searchMatrix(matrix, target) is True        target = 15        assert self.searchMatrix(matrix, target) is True        target = -1        assert self.searchMatrix(matrix, target) is False        target = 16        assert self.searchMatrix(matrix, target) is False        # case4        matrix = [            [1],            [4],            [7],            [11],            [15]        ]        target = 7        assert self.searchMatrix(matrix, target) is True        # case5        matrix = [            [1],            [4],            [7],            [11],            [15]        ]        target = 15        assert self.searchMatrix(matrix, target) is True        target = 1        assert self.searchMatrix(matrix, target) is True        target = 16        assert self.searchMatrix(matrix, target) is False        target = 0        assert self.searchMatrix(matrix, target) is False        # case6        matrix = [            [1, 2, 3, 4, 5],            [6, 7, 8, 9, 10],            [11, 12, 13, 14, 15],            [16, 17, 18, 19, 20],            [21, 22, 23, 24, 25]        ]        target = 5        assert self.searchMatrix(matrix, target) is Trueif __name__ == '__main__':    s = Solution()    s.test_solution()